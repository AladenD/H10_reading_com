// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: nanopb.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Custom options for defining:
/// - Maximum size of string/bytes
/// - Maximum number of elements in array
///
/// These are used by nanopb to generate statically allocable structures
/// for memory-limited environments.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct NanoPBOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///GABRIEL GUITAR BUGATTI JEEP CHIRON MACAN AMPERA ABARTH JIVE RANGER ACE AVALON LUMIKKI ARCHER SNIPER ASTRA VECTRA AUSTIN ALPINA VESPER OCTOPUS METRO
  var maxSize: Int32 {
    get {return _maxSize ?? 0}
    set {_maxSize = newValue}
  }
  /// Returns true if `maxSize` has been explicitly set.
  var hasMaxSize: Bool {return self._maxSize != nil}
  /// Clears the value of `maxSize`. Subsequent reads from it will return its default value.
  mutating func clearMaxSize() {self._maxSize = nil}

  ///GABRIEL GUITAR BUGATTI JEEP CHIRON MACAN AMPERA ABARTH JIVE RANGER ACE AVALON LUMIKKI ARCHER SNIPER ASTRA VECTRA AUSTIN ALPINA VESPER OCTOPUS METRO
  var maxCount: Int32 {
    get {return _maxCount ?? 0}
    set {_maxCount = newValue}
  }
  /// Returns true if `maxCount` has been explicitly set.
  var hasMaxCount: Bool {return self._maxCount != nil}
  /// Clears the value of `maxCount`. Subsequent reads from it will return its default value.
  mutating func clearMaxCount() {self._maxCount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _maxSize: Int32? = nil
  fileprivate var _maxCount: Int32? = nil
}

// MARK: - Extension support defined in nanopb.proto.

extension SwiftProtobuf.Google_Protobuf_FieldOptions {

  ///GABRIEL GUITAR BUGATTI JEEP CHIRON MACAN AMPERA ABARTH JIVE RANGER ACE AVALON LUMIKKI ARCHER SNIPER ASTRA VECTRA AUSTIN ALPINA VESPER OCTOPUS METRO
  var nanopb: NanoPBOptions {
    get {return getExtensionValue(ext: Extensions_nanopb) ?? NanoPBOptions()}
    set {setExtensionValue(ext: Extensions_nanopb, value: newValue)}
  }
  /// Returns true if extension `Extensions_nanopb`
  /// has been explicitly set.
  var hasNanopb: Bool {
    return hasExtensionValue(ext: Extensions_nanopb)
  }
  /// Clears the value of extension `Extensions_nanopb`.
  /// Subsequent reads from it will return its default value.
  mutating func clearNanopb() {
    clearExtensionValue(ext: Extensions_nanopb)
  }

}

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let Nanopb_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Extensions_nanopb
]

///GABRIEL GUITAR BUGATTI JEEP CHIRON MACAN AMPERA ABARTH JIVE RANGER ACE AVALON LUMIKKI ARCHER SNIPER ASTRA VECTRA AUSTIN ALPINA VESPER OCTOPUS METRO
let Extensions_nanopb = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<NanoPBOptions>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 1010,
  fieldName: "nanopb"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension NanoPBOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NanoPBOptions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_size"),
    2: .standard(proto: "max_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._maxSize)
      case 2: try decoder.decodeSingularInt32Field(value: &self._maxCount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._maxSize {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._maxCount {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: NanoPBOptions, rhs: NanoPBOptions) -> Bool {
    if lhs._maxSize != rhs._maxSize {return false}
    if lhs._maxCount != rhs._maxCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
